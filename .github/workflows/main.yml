name: dot-ang-cicd

on: 
  push: 
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: checkout code
      uses: actions/checkout@v4.2.2
      
    - name: Install libssl1.1 for .NET 5 compatibility
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl1.1
        
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3.4.2
      with:
        dotnet-version: '5.0.x'

    - name: dotnet restore
      run: dotnet restore angular-dotnet-example.csproj

    - name: dotnet build
      run: dotnet build angular-dotnet-example.csproj --no-restore

    - name: Setup Node.js 
      uses: actions/setup-node@v3.9.1
      with:
        node-version: '14'

    - name: Clean and install Angular dependencies
      working-directory: ClientApp
      run: |
        rm -rf node_modules package-lock.json
        npm install

    - name: build angular
      working-directory: ClientApp
      run: npm run build 
      
    - name: dotnet publish
      run: dotnet publish angular-dotnet-example.csproj -o publish

    - name: upload build artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: dot-ang-artifacts
        path: publish/
        
  deploy:
    name: deploy to VM
    needs: build
    runs-on: windows-latest
    steps:
    - name: download artifacts
      uses: actions/download-artifact@v4.3.0
      with:
        name: dot-ang-artifacts
        path: ./publish

    - name: Deploy to IIS via WinRM
      shell: pwsh
      env:
       WINRM_HOST: ${{ secrets.WINRMHOST }}
       WINRM_USER: ${{ secrets.WINRMUSER }}
       WINRM_PASS: ${{ secrets.WINRMPASS }}
      run: |
       Write-Host "üîê Setting TrustedHosts for $env:WINRM_HOST"
       Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value $env:WINRM_HOST -Force

       Write-Host "üîì Allowing unencrypted traffic..."
       Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true -Force

       Write-Host "üîë Creating credentials..."
       $secpasswd = ConvertTo-SecureString $env:WINRM_PASS -AsPlainText -Force
       $cred = New-Object System.Management.Automation.PSCredential ($env:WINRM_USER, $secpasswd)

       Write-Host "üåê Creating remote PowerShell session..."
       $session = New-PSSession -ComputerName $env:WINRM_HOST -Credential $cred -Authentication Basic

       Write-Host "üìÇ Preparing destination directory on remote IIS..."
       Invoke-Command -Session $session -ScriptBlock {
         $dest = "C:\inetpub\wwwroot\angdotapp"
         if (-Not (Test-Path $dest)) {
           New-Item -ItemType Directory -Path $dest -Force
         }
         Remove-Item "$dest\*" -Recurse -Force -ErrorAction SilentlyContinue
       }

       Write-Host "üì§ Copying published files to IIS folder..."
       Copy-Item -ToSession $session -Path "./publish/*" -Destination "C:\inetpub\wwwroot\angdotapp" -Recurse

       Write-Host "‚úÖ Final verification on remote VM..."
       Invoke-Command -Session $session -ScriptBlock {
         Write-Output "‚úÖ Deployed to IIS on $env:COMPUTERNAME"
       }

       Write-Host "üßπ Removing session..."
       Remove-PSSession $session

